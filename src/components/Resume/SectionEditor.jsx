import { useState } from "react";
import Button from "../Shared/Button";
import { Plus, Trash2, ChevronDown, ChevronUp } from "lucide-react";

const SectionEditor = ({ 
  section, 
  updateSection, 
  collapsible = true, 
  addable = false, 
  removable = false, 
  onAdd, 
  onRemove,
  aiSuggestion = false
}) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [showAiSuggestions, setShowAiSuggestions] = useState(false);

  // Mock AI suggestions - would be generated by the AI in a real app
  const mockAiSuggestions = [
    "Led cross-functional team to deliver project 2 weeks ahead of deadline, resulting in 20% cost savings.",
    "Implemented new process that increased efficiency by 30% and reduced errors by 25%.",
    "Managed a team of 5 direct reports, providing mentorship and career development opportunities."
  ];

  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    updateSection({ ...section, [name]: value });
  };

  const handleFieldArrayChange = (index, field, value) => {
    const updatedItems = [...section.items];
    updatedItems[index] = { ...updatedItems[index], [field]: value };
    updateSection({ ...section, items: updatedItems });
  };

  const handleApplySuggestion = (suggestion) => {
    // In a real app, this would apply the suggestion to the relevant field
    console.log("Applied suggestion:", suggestion);
    setShowAiSuggestions(false);
  };

  return (
    <div className="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-4">
      {/* Section Header */}
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white">{section.title}</h3>
        <div className="flex space-x-2">
          {aiSuggestion && (
            <Button 
              variant="secondary" 
              size="sm" 
              onClick={() => setShowAiSuggestions(!showAiSuggestions)}
            >
              AI Suggestions
            </Button>
          )}
          {collapsible && (
            <button
              onClick={toggleCollapse}
              className="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
              aria-label={isCollapsed ? "Expand" : "Collapse"}
            >
              {isCollapsed ? <ChevronDown size={20} /> : <ChevronUp size={20} />}
            </button>
          )}
        </div>
      </div>

      {/* AI Suggestions Panel */}
      {showAiSuggestions && (
        <div className="mb-4 p-3 bg-blue-50 dark:bg-gray-700 rounded-md border border-blue-200 dark:border-gray-600">
          <h4 className="font-medium text-blue-800 dark:text-blue-300 mb-2">AI Suggestions</h4>
          <ul className="space-y-2">
            {mockAiSuggestions.map((suggestion, index) => (
              <li key={index} className="flex justify-between items-center">
                <p className="text-sm text-gray-700 dark:text-gray-300">{suggestion}</p>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handleApplySuggestion(suggestion)}
                >
                  Apply
                </Button>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Section Content */}
      {!isCollapsed && (
        <div className="space-y-4">
          {/* Simple fields for section like personal details */}
          {section.fields && section.fields.map((field) => (
            <div key={field.name}>
              <label htmlFor={field.name} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {field.label} {field.required && <span className="text-red-500">*</span>}
              </label>
              {field.type === "textarea" ? (
                <textarea
                  id={field.name}
                  name={field.name}
                  value={section[field.name] || ""}
                  onChange={handleChange}
                  required={field.required}
                  placeholder={field.placeholder}
                  rows={field.rows || 3}
                  className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:text-white"
                />
              ) : (
                <input
                  id={field.name}
                  name={field.name}
                  type={field.type || "text"}
                  value={section[field.name] || ""}
                  onChange={handleChange}
                  required={field.required}
                  placeholder={field.placeholder}
                  className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:text-white"
                />
              )}
              {field.helpText && (
                <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">{field.helpText}</p>
              )}
            </div>
          ))}
          
          {/* Array items for sections like work experience and education */}
          {section.items && section.items.map((item, index) => (
            <div key={index} className="p-4 border border-gray-200 dark:border-gray-700 rounded-md">
              <div className="flex justify-between items-center mb-3">
                <h4 className="font-medium text-gray-800 dark:text-gray-200">
                  {item.title || `Item ${index + 1}`}
                </h4>
                {removable && (
                  <Button
                    variant="danger"
                    size="sm"
                    onClick={() => onRemove(section.id, index)}
                  >
                    <Trash2 size={16} />
                  </Button>
                )}
              </div>
              
              <div className="space-y-3">
                {section.itemFields && section.itemFields.map((field) => (
                  <div key={field.name}>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      {field.label} {field.required && <span className="text-red-500">*</span>}
                    </label>
                    {field.type === "textarea" ? (
                      <textarea
                        value={item[field.name] || ""}
                        onChange={(e) => handleFieldArrayChange(index, field.name, e.target.value)}
                        required={field.required}
                        placeholder={field.placeholder}
                        rows={field.rows || 3}
                        className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:text-white"
                      />
                    ) : (
                      <input
                        type={field.type || "text"}
                        value={item[field.name] || ""}
                        onChange={(e) => handleFieldArrayChange(index, field.name, e.target.value)}
                        required={field.required}
                        placeholder={field.placeholder}
                        className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:text-white"
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
          
          {/* Add button for array sections */}
          {addable && (
            <div className="mt-3">
              <Button
                variant="outline"
                onClick={() => onAdd(section.id)}
                className="w-full flex justify-center items-center"
              >
                <Plus size={18} className="mr-2" />
                Add {section.addButtonText || "Item"}
              </Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SectionEditor;